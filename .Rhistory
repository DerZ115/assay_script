plot(cars)
path = "20230428_Nanoparticles_OD1_24h_reduced.txt"
data = readLines(path)
?readLines
data = readLines(path, encoding = 'utf-8')
data
install.packages("readr")
data = readLines(path, encoding = 'utf-16')
data = readLines(path, encoding = 'UTF-16LE')
?readLines
data = readLines(path, encoding = 'UTF16LE')
path = "20230428_Nanoparticles_OD1_24h_reduced.txt"
path = "20230428_Nanoparticles_OD1_24h_reduced.txt"
data = readLines(path, encoding = 'UTF16LE')
Encoding(data)
data = readLines(path, encoding = 'UCS-2LE')
data = readLines(path, encoding = "UTF16LE")
Encoding(data)
data = readLines(path, encoding = "UCS-2LE")
Encoding(data)
data = readLines(con <- file(path, encoding = "UCS-2LE"))
Encoding(data)
close(con)
Encoding(data)
path <- "20230428_Nanoparticles_OD1_24h_reduced.txt"
data <- readLines(file(path, encoding = "UCS-2LE"))
data
blocks <- regexpr("\d+$")
install.packages("tidyverse")
library(stringr)
blocks <- str_extract("\\d+$", data[1])
data[1]
blocks <- str_extract(data[1], "\\d+$")
blocks <- as.integer(str_extract(data[1], "\\d+$"))
library(readr)
data <- read_file(path)
data <- read_file(file(path, encoding = "UCS-2LE"))
data <- read_file(file(path, encoding = "UCS-2LE"))
read_file
read_file_raw(path)
?read_file
data <- read_file_raw(file(path, encoding = "UCS-2LE"))
data <- read_file(file(path, encoding = "UCS-2LE"))
guess_encoding(path)
?guess_encoding
data <- read_file(path, locale = locale(encoding = "UTF-16LE"))
blocks <- as.integer(str_extract(data, "##BLOCKS= ?\\d+\\n"))
blocks <- as.integer(str_extract(data, "##BLOCKS= ?\\d+"))
blocks <- as.integer(str_extract(data, "##BLOCKS= \\d+"))
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)"))
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\n")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\n")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\R")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\r")[2])
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\R")[2])
plates <- str_match_all(data, "Plate:.*\\R.*\\R(\\t|\\d)*")
View(plates)
plates[[1]]
plates <- str_match(data, "Plate:.*\\R.*\\R(\\t|\\d)*")
View(plates)
plates <- str_match(data, "(Plate:.*)\\R")
plates
plates <- str_match_all(data, "(Plate:.*)\\R")
plates
View(plates)
plates <- str_match_all(data, "Plate:.*\\R\\t|\\d*\\R")
plates
plates <- str_match_all(data, "Plate:.*\\R.*\\R")
plates
plates <- str_match_all(data, "Plate:.*\\R[\\t\\d]*\\R")
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R")
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\t\\d]*)\\R)*")
plates
data
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*")
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~END")
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*\~END")
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*\\~END")
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~END")
plates
str_match_all(data, "~END")
str_match_all(data, "\~END")
str_match_all(data, "\\~END")
str_match_all(data, "\\\~END")
str_match_all(data, "\\\\~END")
str_match_all(data, "~End")
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")
plates
unlist(plates)
plates[1]
plates[m,1]
plates[,1]
plates[]
plates[[,2]]
plates[,2]
plates[[1]]
plates[[1]][,1]
plates[[1]][,2]
unlist(plates)
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")[[1]][,2]
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")[[1]][,3]
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")[[1]][,3]
plates
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")[[1]][,2]
plates
plates[[1]][,2]
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t([\\s\\d]*)\\R)*~End")
plates[[1]][,2]
plates[[1]][,3]
?str_replace
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t[\\s\\d]*\\R)*~End")
plates[[1]][,2]
plates <- plates[[1]][,2]
as.list(plates)
plates <- as.list(plates)
View(plates)
?str_split
paste(str_split_1(plate, "\\R"))
for (plate in plates) {
paste(str_split_1(plate, "\\R"))
}
View(plates)
print(str_split_1(plate, "\\R"))
print(plate)
for (plate in plates) {
print(plate)
}
for (plate in plates) {
print(str_split_1(plate, "\\R"))
}
str_split_1(plate, "\\R") %>%
str_extract("\t\t([\s\\d]*)\t")
str_split_1(plate, "\\R") %>%
str_extract("\t\t([\s\\d]*)\t")
str_split_1(plate, "\\R") %>%
str_extract("\t\t([\\s\\d]*)\t")
str_split_1(plate, "\\R") %>%
str_match("\t\t([\\s\\d]*)\t")
str_split_1(plate, "\\R") %>%
str_match("\t\t([\\s\\d]*)\t")[,2]
str_split_1(plate, "\\R") %>%
str_match("\t\t([\\s\\d]*)\t")[,2]
str_sub()
?str_sub()
str_split_1(plate, "\\R") %>%
str_sub(start = 3)
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2)
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2) %>%
as.data.frame()
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2) %>%
read.csv(text = .)
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2) %>%
read.tsv(text = .)
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t")
for (plate in plates) {
plate <-
str_split_1(plate, "\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t")
}
View(plates)
plate.names <- str_matchall(data, "Plate:\t(.*?)\t")
plate.names <- str_match_all(data, "Plate:\t(.*?)\t")
View(plate.names)
plate.names <- str_match_all(data, "Plate:\t(.*?)\t")[[1]]
View(plate.names)
plate.names <- str_match_all(data, "Plate:\t(.*?)\t")[[1]][,2]
names(plates) <- plate.names
View(plates)
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t"))
plates <-
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t"))
View(plates)
plates <-
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t") %>%
as.array())
data <- read_file(path, locale = locale(encoding = "UTF-16LE"))
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\R")[2])
plate.names <- str_match_all(data, "Plate:\t(.*?)\t")[[1]][,2]
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t[\\s\\d]*\\R)*~End")[[1]][,2]
plates <- as.list(plates)
names(plates) <- plate.names
plates <-
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t") %>%
as.array())
plates <-
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t") %>%
as.matrix())
View(plates)
plates[[1]]
View(plates)
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t[\\s\\d]*\\R)*~End")[[1]][,2] %>%
as.list(plates)
data <- read_file(path, locale = locale(encoding = "UTF-16LE"))
blocks <- as.integer(str_match(data, "##BLOCKS= (\\d+)\\R")[2])
plates <- str_match_all(data, "Plate:.*\\R[\t\\d]*\\R(\t[\\s\\d]*\\R)*~End")[[1]][,2] %>%
as.list(plates)
names(plates) <- str_match_all(data, "Plate:\t(.*?)\t")[[1]][,2]
plates <-
lapply(plates, . %>%
str_split_1("\\R") %>%
str_sub(start = 3, end = -2) %>%
read.delim(text = ., header = F, sep = "\t") %>%
as.matrix())
plates[[1]]
